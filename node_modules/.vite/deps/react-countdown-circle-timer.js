import {
  require_react
} from "./chunk-ZOIWZPCO.js";
import {
  __toESM
} from "./chunk-DFKQJ226.js";

// node_modules/react-countdown-circle-timer/lib/index.module.js
var import_react = __toESM(require_react());
var import_react2 = __toESM(require_react());
var import_react3 = __toESM(require_react());
var import_react4 = __toESM(require_react());
var v = typeof window == "undefined" ? import_react4.useEffect : import_react4.useLayoutEffect;
var I = ({ isPlaying: o, duration: e, startAt: n = 0, updateInterval: t = 0, onComplete: i, onUpdate: r }) => {
  let [u, m] = (0, import_react3.useState)(n), l = (0, import_react3.useRef)(0), p = (0, import_react3.useRef)(n), d = (0, import_react3.useRef)(n * -1e3), s = (0, import_react3.useRef)(null), c = (0, import_react3.useRef)(null), C = (0, import_react3.useRef)(null), h = (f) => {
    let a = f / 1e3;
    if (c.current === null) {
      c.current = a, s.current = requestAnimationFrame(h);
      return;
    }
    let $ = a - c.current, g = l.current + $;
    c.current = a, l.current = g;
    let R = p.current + (t === 0 ? g : (g / t | 0) * t), D = p.current + g, P = typeof e == "number" && D >= e;
    m(P ? e : R), P || (s.current = requestAnimationFrame(h));
  }, y = () => {
    s.current && cancelAnimationFrame(s.current), C.current && clearTimeout(C.current), c.current = null;
  }, b = (0, import_react3.useCallback)((f) => {
    y(), l.current = 0;
    let a = typeof f == "number" ? f : n;
    p.current = a, m(a), o && (s.current = requestAnimationFrame(h));
  }, [o, n]);
  return v(() => {
    if (r == null || r(u), e && u >= e) {
      d.current += e * 1e3;
      let { shouldRepeat: f = false, delay: a = 0, newStartAt: $ } = (i == null ? void 0 : i(d.current / 1e3)) || {};
      f && (C.current = setTimeout(() => b($), a * 1e3));
    }
  }, [u, e]), v(() => (o && (s.current = requestAnimationFrame(h)), y), [o, e, t]), { elapsedTime: u, reset: b };
};
var A = (o, e, n) => {
  let t = o / 2, i = e / 2, r = t - i, u = 2 * r, m = n === "clockwise" ? "1,0" : "0,1", l = 2 * Math.PI * r;
  return { path: `m ${t},${i} a ${r},${r} 0 ${m} 0,${u} a ${r},${r} 0 ${m} 0,-${u}`, pathLength: l };
};
var k = (o, e) => o === 0 || o === e ? 0 : typeof e == "number" ? o - e : 0;
var T = (o) => ({ position: "relative", width: o, height: o });
var B = { display: "flex", justifyContent: "center", alignItems: "center", position: "absolute", left: 0, top: 0, width: "100%", height: "100%" };
var G = (o, e, n, t) => {
  if (t === 0)
    return e;
  let i = o / t;
  return e + n * i;
};
var F = (o) => {
  var e, n;
  return (n = (e = o.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i, (t, i, r, u) => `#${i}${i}${r}${r}${u}${u}`).substring(1).match(/.{2}/g)) == null ? void 0 : e.map((t) => parseInt(t, 16))) != null ? n : [];
};
var j = (o, e) => {
  var d;
  let { colors: n, colorsTime: t, isSmoothColorTransition: i = true } = o;
  if (typeof n == "string")
    return n;
  let r = (d = t == null ? void 0 : t.findIndex((s, c) => s >= e && e >= t[c + 1])) != null ? d : -1;
  if (!t || r === -1)
    return n[0];
  if (!i)
    return n[r];
  let u = t[r] - e, m = t[r] - t[r + 1], l = F(n[r]), p = F(n[r + 1]);
  return `rgb(${l.map((s, c) => G(u, s, p[c] - s, m) | 0).join(",")})`;
};
var S = (o) => {
  let { duration: e, initialRemainingTime: n, updateInterval: t, size: i = 180, strokeWidth: r = 12, trailStrokeWidth: u, isPlaying: m = false, rotation: l = "clockwise", onComplete: p, onUpdate: d } = o, s = (0, import_react2.useRef)(), c = Math.max(r, u != null ? u : 0), { path: C, pathLength: h } = A(i, c, l), { elapsedTime: y } = I({ isPlaying: m, duration: e, startAt: k(e, n), updateInterval: t, onUpdate: typeof d == "function" ? (f) => {
    let a = Math.ceil(e - f);
    a !== s.current && (s.current = a, d(a));
  } : void 0, onComplete: typeof p == "function" ? (f) => {
    var R;
    let { shouldRepeat: a, delay: $, newInitialRemainingTime: g } = (R = p(f)) != null ? R : {};
    if (a)
      return { shouldRepeat: a, delay: $, newStartAt: k(e, g) };
  } : void 0 }), b = e - y;
  return { elapsedTime: y, path: C, pathLength: h, remainingTime: Math.ceil(b), rotation: l, size: i, stroke: j(o, b), strokeDashoffset: G(y, 0, h, e), strokeWidth: r };
};
var W = (o) => {
  let { children: e, strokeLinecap: n, trailColor: t, trailStrokeWidth: i } = o, { path: r, pathLength: u, stroke: m, strokeDashoffset: l, remainingTime: p, elapsedTime: d, size: s, strokeWidth: c } = S(o);
  return import_react.default.createElement("div", { style: T(s) }, import_react.default.createElement("svg", { viewBox: `0 0 ${s} ${s}`, width: s, height: s, xmlns: "http://www.w3.org/2000/svg" }, import_react.default.createElement("path", { d: r, fill: "none", stroke: t != null ? t : "#d9d9d9", strokeWidth: i != null ? i : c }), import_react.default.createElement("path", { d: r, fill: "none", stroke: m, strokeLinecap: n != null ? n : "round", strokeWidth: c, strokeDasharray: u, strokeDashoffset: l })), typeof e == "function" && import_react.default.createElement("div", { style: B }, e({ remainingTime: p, elapsedTime: d, color: m })));
};
W.displayName = "CountdownCircleTimer";
export {
  W as CountdownCircleTimer,
  S as useCountdown
};
//# sourceMappingURL=react-countdown-circle-timer.js.map
